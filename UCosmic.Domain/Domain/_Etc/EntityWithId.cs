using System;

namespace UCosmic.Domain
{
    public abstract class EntityWithId<TKey> : Entity, IEquatable<EntityWithId<TKey>>
    {
        public TKey Id { get; protected set; }

        public override int GetHashCode()
        {
            return Equals(Id, default(TKey)) ? 0 : Id.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as EntityWithId<TKey>);
        }

        public virtual bool Equals(EntityWithId<TKey> other)
        {
            // instance is never equal to null
            if (other == null) return false;

            // when references are equal, they are the same object
            if (ReferenceEquals(this, other)) return true;

            // when the id's are equal and neither object is transient
            if (!IsTransient(this) && !IsTransient(other) && Equals(Id, other.Id))
            {
                // return true when one can be cast to the other
                // because this entity could be generated by a proxy
                var otherType = other.GetUnproxiedType();
                var thisType = GetUnproxiedType();
                return thisType.IsAssignableFrom(otherType) || otherType.IsAssignableFrom(thisType);
            }
            return false;
        }

        private static bool IsTransient(EntityWithId<TKey> obj)
        {
            // an object is transient when it is not null
            return obj != null

                   // and when its id is the default (null for strings or 0 for numbers)
                   && Equals(obj.Id, default(TKey));
        }

        private Type GetUnproxiedType()
        {
            return GetType(); // return the unproxied type of the object
        }
    }
}