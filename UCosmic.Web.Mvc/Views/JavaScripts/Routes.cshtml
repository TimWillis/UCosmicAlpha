@using System.Diagnostics
@using System.Globalization
@* ReSharper disable InconsistentNaming *@
@* ReSharper disable DuplicatingLocalDeclaration *@
@* ReSharper disable UnusedParameter *@
@* ReSharper disable AssignedValueIsNeverUsed *@
@functions
{
    private readonly string s0 = Guid.NewGuid().ToString();
    private readonly string s1 = Guid.NewGuid().ToString();
    private readonly string s2 = Guid.NewGuid().ToString();
    private readonly string s3 = Guid.NewGuid().ToString();
    private readonly string s4 = Guid.NewGuid().ToString();

    private readonly int i0 = int.MaxValue;
    private readonly int i1 = int.MaxValue - 1;
    private readonly int i2 = int.MaxValue - 2;
    private readonly int i3 = int.MaxValue - 3;
    private readonly int i4 = int.MaxValue - 4;

    private string HttpUrlFormat(string url)
    {
        Debug.Assert(url != null);
        url = url.Replace(s0, "{0}").Replace(i0.ToString(CultureInfo.InvariantCulture), "{0}")
            .Replace(s1, "{1}").Replace(i1.ToString(CultureInfo.InvariantCulture), "{1}")
            .Replace(s2, "{2}").Replace(i2.ToString(CultureInfo.InvariantCulture), "{2}")
            .Replace(s3, "{3}").Replace(i3.ToString(CultureInfo.InvariantCulture), "{3}")
            .Replace(s4, "{4}").Replace(i4.ToString(CultureInfo.InvariantCulture), "{4}")
        ;
        return url;
    }
}

@* ReSharper disable UnusedLocals *@

<script type="text/javascript">
    var Routes;
    (function (Routes) {
        //#region WebApi

        (function (Api) {
            //#region Employees

            (function (Employees) {
                (function (Activities) {
                    function places(domain) {
                        return '@HttpUrlFormat(Url.HttpRouteUrl(null, new
                        {
                            controller = "Employees",
                            action = "GetActivitiesPlaces",
                            domain = s0,
                        }))'.format(domain);
                    }
                    Activities.places = places;
                    function summary(domain) {
                        return '@HttpUrlFormat(Url.HttpRouteUrl(null, new
                        {
                            controller = "Employees",
                            action = "GetActivitiesSummary",
                            domain = s0,
                        }))'.format(domain);
                    }
                    Activities.summary = summary;
                })(Employees.Activities || (Employees.Activities = {}));
                var Activities = Employees.Activities;
                (function (Settings) {
                    function icon(domain, iconName) {
                        return '@HttpUrlFormat(Url.HttpRouteUrl(null, new
                        {
                            controller = "Employees",
                            action = "GetSettingsIcon",
                            domain = s0,
                            name = s1,
                        }))'.format(domain, iconName);
                    }
                    Settings.icon = icon;
                })(Employees.Settings || (Employees.Settings = {}));
                var Settings = Employees.Settings;
            })(Api.Employees || (Api.Employees = {}));
            var Employees = Api.Employees;

            //#endregion
        })(Routes.Api || (Routes.Api = {}));
        var Api = Routes.Api;

        //#endregion
        (function (Mvc) {
            (function (Employees) {
                (function (Activities) {
                    function edit(activityId) {
                        return '@HttpUrlFormat(Url.RouteUrl(new
                        {
                            controller = "Activities",
                            action = "Edit",
                            activityId = i0,
                        }))'.format(activityId);
                    }
                    Activities.edit = edit;
                })(Employees.Activities || (Employees.Activities = {}));
                var Activities = Employees.Activities;
            })(Mvc.Employees || (Mvc.Employees = {}));
            var Employees = Mvc.Employees;
        })(Routes.Mvc || (Routes.Mvc = {}));
        var Mvc = Routes.Mvc;
    })(Routes || (Routes = {}));
</script>

@* ReSharper restore UnusedLocals *@
@* ReSharper restore AssignedValueIsNeverUsed *@
@* ReSharper restore UnusedParameter *@
@* ReSharper restore DuplicatingLocalDeclaration *@
@* ReSharper restore InconsistentNaming *@