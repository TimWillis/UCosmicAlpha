@{
    ViewBag.Title = "Api Test";
}

@section scripts
{

    <script type="text/javascript">

        //#region Agreements API

        $.get(App.Routes.WebApi.Agreements.UmbrellaOptions.get(2)).done(function() {
            //alert('have results');
        });

        //#region Agreement
        
        $('#agreement_post_button').click(function() {
            $.post(App.Routes.WebApi.Agreements.post(), {
                participants: [
                    { establishmentId: 66, isOwner: true },
                    //{ establishmentId: 1, isOwner: false },
                    { establishmentId: 1, isOwner: false }
                ],
                umbrellaId: 2,
                type: 'Institutional Agreement',
                name: 'FIPSE Brazil',
                content: '<p>Here is my agreement content</p>',
                notes: 'Here are my agreement notes',
                startsOn: '6/5/2008',
                expiresOn: '6/4/2013',
                isExpirationEstimated: true,
                isAutoRenew: false,
                status: 'Pending',
                visibility: 'Protected'
            })
                .done(function(responseText, statusText, xhr) {
                    var location = xhr.getResponseHeader('location');
                    var agreementId = parseInt(location.substring(location.lastIndexOf('/') + 1));
                    var info = 'post of agreement data resulted in new agreement id ' + agreementId;
                    console.log(info);
                    alert(info);
                });
        });
        $('#agreement_put_button').click(function() {
            $.ajax({
                url: App.Routes.WebApi.Agreements.put(1),
                type: 'PUT',
                data: {
                    umbrellaId: 2,
                    type: 'Test PUT agreement type',
                    name: 'Test PUT agreement name',
                    content: '<p>Here is my PUTted agreement content</p>',
                    notes: 'Here are my PUTted agreement notes',
                    startsOn: '6/5/2009',
                    expiresOn: '6/4/2014',
                    isExpirationEstimated: true,
                    isAutoRenew: false,
                    status: 'PUT Pending status',
                    visibility: 'Private'
                }
            })
                .done(function(responseText, statusText, xhr) {
                    var info = 'put of agreement data resulted in response "' + responseText + '"';
                    console.log(info);
                    alert(info);
                });
        });
        $('#agreement_delete_button').click(function () {
            $.ajax({
                url: App.Routes.WebApi.Agreements.del(15),
                type: 'DELETE'
            })
                .done(function (responseText, statusText, xhr) {
                    var info = 'delete of agreement data resulted in response "' + responseText + '"';
                    console.log(info);
                    alert(info);
                });
        });
        
        //#endregion
        //#region Participants
        
        $('#agreement_participant_put_button').click(function () {
            $.ajax({
                url: App.Routes.WebApi.Agreements.Participants.put(1, 67),
                type: 'PUT',
                data: {
                    isOwner: true
                }
            })
                .done(function (responseText, statusText, xhr) {
                    var info = 'put of agreement data resulted in response "' + responseText + '"';
                    console.log(info);
                    alert(info);
                });
        });
        $('#agreement_participant_delete_button').click(function () {
            $.ajax({
                url: App.Routes.WebApi.Agreements.Participants.del(14, 1),
                type: 'DELETE'
            })
                .done(function (responseText, statusText, xhr) {
                    var info = 'delete of agreement data resulted in response "' + responseText + '"';
                    console.log(info);
                    alert(info);
                });
        });

        //#endregion
        //#region Contact
        
        $('#agreement_contact_post_button').click(function () {
            $.post(App.Routes.WebApi.Agreements.Contacts.post(3), {
                personId: 13,
                type: 'My Contact Type',
                salutation: 'Professor',
                firstName: 'William',
                middleName: 'Stevenson',
                lastName: 'Preston',
                suffix: 'Esquire',
                emailAddress: 'bill@x-adventures.at',
                jobTitle: 'Owner',
                phones: [
                    {
                        type: 'phone type 1 posted with contact',
                        value: 'phone value 1 posted with contact'
                    },
                    {
                        type: 'phone type 2 posted with contact',
                        value: 'phone value 2 posted with contact'
                    }
                ]
            })
                .done(function(responseText, statusText, xhr) {
                    var location = xhr.getResponseHeader('location');
                    var contactId = parseInt(location.substring(location.lastIndexOf('/') + 1));
                    var info = 'post of contact data resulted in new agreement contact id ' + contactId;
                    console.log(info);
                    alert(info);
                });
        });
        $('#agreement_contact_put_button').click(function() {
            $.ajax({
                url: App.Routes.WebApi.Agreements.Contacts.put(3, 5),
                type: 'PUT',
                data: {
                    type: 'My Contact Type 2',
                    salutation: 'Dr.',
                    firstName: 'Bill',
                    middleName: 'S',
                    lastName: 'preston',
                    suffix: 'Esq.',
                    emailAddress: 'bill@x-adventures.net',
                    jobTitle: 'Partner'
                }
            })
                .done(function(responseText, statusText, xhr) {
                    var info = 'put of contact data resulted in response "' + responseText + '"';
                    console.log(info);
                    alert(info);
                });
        });
        $('#agreement_contact_delete_button').click(function() {
            $.ajax({
                url: App.Routes.WebApi.Agreements.Contacts.del(3, 6),
                type: 'DELETE',
            })
                .done(function(responseText, statusText, xhr) {
                    var info = 'delete of contact data resulted in response "' + responseText + '"';
                    console.log(info);
                    alert(info);
                });
        });
        
        //#endregion
        //#region Contact Phone
        
        $('#agreement_contact_phone_post_button').click(function () {
            $.post(App.Routes.WebApi.Agreements.Contacts.Phones.post(1, 1), {
                type: 'Posted Phone Type',
                value: 'Posted Phone Number'
            })
                .done(function (responseText, statusText, xhr) {
                    var location = xhr.getResponseHeader('location');
                    var phoneId = parseInt(location.substring(location.lastIndexOf('/') + 1));
                    var info = 'post of contact phone data resulted in new agreement contact phone id ' + phoneId;
                    console.log(info);
                    alert(info);
                });
        });
        $('#agreement_contact_phone_put_button').click(function () {
            $.ajax({
                url: App.Routes.WebApi.Agreements.Contacts.Phones.put(3, 4, 4),
                type: 'PUT',
                data: {
                    type: 'PUT phone type',
                    value: 'PUT phone value'
                }
            })
                .done(function (responseText, statusText, xhr) {
                    var info = 'put of contact phone data resulted in response "' + responseText + '"';
                    console.log(info);
                    alert(info);
                });
        });
        $('#agreement_contact_phone_delete_button').click(function () {
            $.ajax({
                url: App.Routes.WebApi.Agreements.Contacts.Phones.del(3, 7, 11),
                type: 'DELETE',
            })
                .done(function (responseText, statusText, xhr) {
                    var info = 'delete of contact phone data resulted in response "' + responseText + '"';
                    console.log(info);
                    alert(info);
                });
        });

        //#endregion
        
        //#endregion
        //#region Circle graphic

        window.countGraphicValue = ko.observable(-1);
        window.countGraphicOpacity = ko.observable(1);
        setInterval(function() {
            window.countGraphicValue(window.countGraphicValue() + 1);
            if (window.countGraphicValue() > 1299) {
                window.countGraphicValue(0);
                window.countGraphicOpacity(window.countGraphicOpacity() - 0.1);
                if (window.countGraphicOpacity() < 0.1)
                    window.countGraphicOpacity(1);
            }
            $('#placemark_graphic').attr('src', '/api/graphics/circle?side=24&opacity=' + window.countGraphicOpacity() + '&text=' + window.countGraphicValue());
        }, 50);

        //#endregion
        //#region Upload

        function TempUpload() {
            var self = this;

            this.uploads = ko.observableArray();
            var console = window.console || {
                log: function(message) {
                    alert(message);
                }
            };

            $('#post_agreement_upload_button').click(function() {
                var guid = $('#post_agreement_upload_guid').val();
                $.post('/api/agreements/6/files', {
                    uploadGuid: guid,
                    originalName: 'originalName.pdf',
                    customName: 'customName',
                    visibility: 'Private'
                }).done(function(responseText, statusText, xhr) {
                    var location = xhr.getResponseHeader('location');
                    var fileId = parseInt(location.substring(location.lastIndexOf('/') + 1));
                    var info = 'post of uploaded file resulted in new agreement id ' + fileId;
                    console.log(info);
                });
            });

            $('#agreement_files').kendoUpload({
                multiple: true,
                showFileList: false,
                localization: {
                    select: 'Choose temporary files to upload...'
                },
                async: {
                    saveUrl: '/api/agreements/6/files'
                    //saveUrl: App.Routes.WebApi.Uploads.post()//,
                    //removeUrl: '/somepaththatdoesnotexistatleastyet'
                },
                select: function(e) {
                    // the select event fires once no matter how many files were selected.
                    console.log('KendoUpload.select fired.');
                    console.log('Looping through all files, ' + e.files.length + ' total.');
                    // the e.files array may contain more than 1 file.
                    for (var i = 0; i < e.files.length; i++) {
                        var fileNumber = i + 1;
                        var file = e.files[i];
                        console.log('File #' + fileNumber + ' is"' + file.name + '", size is ' + (file.size === null ? 'unknown' : file.size + ' bytes') + '.');
                        // prepare the uploads observable array and do non-async server-side validation here.
                        var upload = {
                            extension: file.extension,
                            name: file.name,
                            size: file.size,
                            percentComplete: ko.observable(1),
                            isFinished: false,
                            errorMessage: ko.observable(),
                            clearError: function(index) {
                                self.uploads.splice(index, 1);
                            }
                        };
                        console.log('Adding file #' + fileNumber + ' into to observable array.');
                        self.uploads.push(upload);
                        console.log('Validating file #' + fileNumber + ' name and size against server.');
                        $.ajax({
                            url: App.Routes.WebApi.Agreements.Files.Validate.post(),
                            type: 'POST',
                            async: false,
                            data: {
                                name: file.name,
                                length: file.size
                            }
                        })
                            .done(function() {
                                console.log('File #' + fileNumber + ' passed server-side validation.');
                            })
                            .fail(function(xhr) {
                                // do not preventDefault here as that would prevent validated files from uploading
                                console.log('File #' + fileNumber + ' failed server-side validation with message"' + xhr.responseText + '".');
                                upload.errorMessage(xhr.responseText);
                            });
                    }
                    console.log('KendoUpload.select event handler completed.');
                },
                upload: function(e) {
                    // the upload event fires once for each file selected.
                    // the e.files array should only contain 1 file.
                    var file = e.files[0];
                    console.log('KendoUpload.upload fired for file "' + file.name + '" with size "' + (file.size === null ? 'unknown' : file.size) + '".');
                    console.log('Checking observable uploads array for unfinished file named "' + file.name + '".');
                    var criteria = file;
                    criteria.isFinished = false;
                    var upload = self.getUpload(criteria);
                    if (!upload) {
                        console.log('Could not find unfinished file named "' + file.name + '" in observable uploads array.');
                        e.preventDefault();
                    } else {
                        console.log('Found unfinished file named "' + file.name + '" in observable uploads array.');
                        if (upload.errorMessage()) {
                            console.log('Preventing upload of file named "' + file.name + '" because it has an error message.');
                            upload.percentComplete(100);
                            upload.isFinished = true;
                            e.preventDefault();
                        } else {
                            console.log('Adding POST parameters for upload of file named "' + file.name + '".');
                            e.data = {
                                //uploadGuid: '4fc91d48-62b8-42ec-99b1-06816774ac93',
                                originalName: e.files[0].name,
                                customName: 'customName',
                                visibility: 'Private'
                            };
                        }
                    }
                    console.log('KendoUpload.upload event handler completed.');
                },
                progress: function(e) {
                    // the progress event may fire many times for each file selected.
                    // the e.files array should only contain 1 file.
                    // note this event will not fire for IE8
                    var file = e.files[0];
                    console.log('KendoUpload.progress fired for file "' + file.name + '" with size "' + (file.size === null ? 'unknown' : file.size) + '".');
                    console.log('Checking observable uploads array for unfinished file named "' + file.name + '".');
                    var criteria = e.files[0];
                    criteria.isFinished = false;
                    var upload = self.getUpload(criteria);
                    if (!upload) {
                        console.log('Could not find unfinished file named "' + file.name + '" in observable uploads array.');
                    } else {
                        console.log('Updating observable progress for unfinished file named "' + file.name + '" in observable uploads array.');
                        upload.percentComplete(e.percentComplete);
                        if (e.percentComplete == 100) {
                            console.log('Progress for unfinished file named "' + file.name + '" is complete, marking finished.');
                            upload.isFinished = true;
                        }
                    }
                    console.log('KendoUpload.progress event handler completed.');
                },
                success: function(e) {
                    // the success event fires once for each file selected.
                    // the e.files array should only contain 1 file.
                    var file = e.files[0];
                    console.log('KendoUpload.success fired for file "' + file.name + '" with size "' + (file.size === null ? 'unknown' : file.size) + '".');
                    console.log('Checking observable uploads array for unfinished file named "' + file.name + '".');
                    var criteria = file;
                    criteria.isFinished = false;
                    var upload = self.getUpload(criteria);
                    if (!upload) {
                        console.log('Could not find unfinished file named "' + file.name + '" in observable uploads array.');
                    } else {
                        console.log('Updating observable progress for unfinished file named "' + file.name + '" in observable uploads array.');
                        upload.percentComplete(100);
                        console.log('Progress for unfinished file named "' + file.name + '" is complete, marking finished.');
                        upload.isFinished = true;
                    }
                    ;
                    console.log('KendoUpload.success event handler completed.');
                },
                error: function(e) {
                    // the error event fires once for each file selected.
                    // the e.files array should only contain 1 file.
                    // IE8 is unable to validate file size, so we need to handle it here
                    var file = e.files[0];
                    console.log('KendoUpload.error fired for file "' + file.name + '" with size "' + (file.size === null ? 'unknown' : file.size) + '".');
                    console.log('Checking observable uploads array for unfinished file named "' + file.name + '".');
                    var criteria = file;
                    criteria.isFinished = false;
                    var upload = self.getUpload(criteria);
                    if (!upload) {
                        console.log('Could not find unfinished file named "' + file.name + '" in observable uploads array, checking for finished file with the same name.');
                        criteria.isFinished = true;
                        upload = self.getUpload(criteria);
                        if (upload) {
                            console.log('Updating observable progress for finished file named "' + file.name + '" in observable uploads array.');
                            upload.percentComplete(100);
                        }
                    }
                    console.log('Updating observable progress for unfinished file named "' + file.name + '" in observable uploads array.');
                    upload.percentComplete(100);
                    console.log('Progress for unfinished file named "' + file.name + '" is complete, marking finished.');
                    upload.isFinished = true;
                    if (e.XMLHttpRequest.responseText &&
                        e.XMLHttpRequest.responseText.length < 1000) {
                        console.log('Displaying error message "' + e.XMLHttpRequest.responseText + '" to user.');
                        upload.errorMessage(e.XMLHttpRequest.responseText);
                    } else {
                        console.log('Displaying generic error message to user.');
                        upload.errorMessage('UCosmic experienced an unexpected error managing your file attachment, please try again. If you continue to experience this issue, please use the Feedback & Support link on this page to report it.');
                    }
                    console.log('KendoUpload.error event handler completed.');
                },
                complete: function() {
                    // the complete event fires once no matter how successes or fails occurred.
                    console.log('KendoUpload.complete fired.');
                    console.log('KendoUpload.complete event handler completed.');
                }
            });

            this.getUpload = function(criteria) {
                var uploads = self.uploads();
                for (var i = 0; i < uploads.length; i++) {
                    var upload = uploads[i];
                    if (upload.name === criteria.name && upload.size === criteria.size) {
                        if (typeof(criteria.isFinished) === 'undefined' || upload.isFinished === criteria.isFinished) {
                            return upload;
                        }
                    }
                }
                return null;
            };
        }

        ;

        function ViewModel() {
            var self = this;

            this.tempUpload = new TempUpload();
            this.agreementSettings = {
                urlString: 'App.Routes.WebApi.Agreements.Settings.get()',
                result: ko.observable(),
                invoke: function() {
                    $.ajax({
                        url: eval(this.urlString),
                        type: 'GET'
                    })
                        .done(function(result) {
                            //if (result) alert('done: result = ' + result);
                            //else alert('done: NO RESULT (' + result + ')');
                            self.agreementSettings.result(JSON.stringify(result, undefined, 4));
                            //$('#agreementSettingsGet').text(JSON.stringify(result, undefined, 4));
                        })
                        .fail(function(xhr) {
                            alert('fail: status = ' + xhr.status + ' ' + xhr.statusText + '; message = "' + xhr.responseText + '"');
                        });
                },
                clear: function() {
                    self.agreementSettings.result(undefined);
                }
            };
        }

        ;

        ko.applyBindings(new ViewModel(), $('[data-current-module=admin]')[0]);

    //#endregion
    </script>

}

<div class="content fixed" data-current-module="admin">
    <header>
        <h1>@ViewBag.Title</h1>
    </header>
    <section>
        <header>
            <h2>Agreement POSTs, PUTs, &amp; DELETEs</h2>
        </header>
        <div>
            <input id="agreement_post_button" type="button" value="POST test agreement" />
            <input id="agreement_put_button" type="button" value="PUT test agreement" />
            <input id="agreement_delete_button" type="button" value="DELETE test agreement" />
            <br/>
            <br/>
            <input id="agreement_participant_put_button" type="button" value="PUT test agreement participant" />
            <input id="agreement_participant_delete_button" type="button" value="DELETE test agreement participant" />
            <br/>
            <br/>
            <input id="agreement_contact_post_button" type="button" value="POST test agreement contact" />
            <input id="agreement_contact_put_button" type="button" value="PUT test agreement contact" />
            <input id="agreement_contact_delete_button" type="button" value="DELETE test agreement contact" />
            <br/>
            <br/>
            <input id="agreement_contact_phone_post_button" type="button" value="POST test agreement contact phone" />
            <input id="agreement_contact_phone_put_button" type="button" value="PUT test agreement contact phone" />
            <input id="agreement_contact_phone_delete_button" type="button" value="DELETE test agreement contact phone" />
        </div>
    </section>
    <section data-bind="visible: tempUpload" style="display: none;">
        <header>
            <h2>Temporary File Upload</h2>
        </header>
        <div>
            <form enctype="multipart/form-data">
                <div>
                    <input id="agreement_files" type="file" name="fileMedium" />
                </div>
                <ul data-bind="foreach: tempUpload.uploads">
                    <li>
                        <div class="group" data-bind="visible: !errorMessage()">
                            <div class="on-left" style="width: 500px; -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box;">
                                <div style="border: solid 1px #666; position: relative; margin-top: 4px; -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box;">
                                    <div style="height: 28px; overflow: hidden; position: absolute; display: block; width: 100%; -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; line-height: 28px; padding: 0 4px;">
                                        <div class="group">
                                            <div class="on-left">
                                                <span data-bind="text: name"></span>
                                            </div>
                                            <div class="on-right" style="-moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; padding: 4px 0 4px 4px;">
                                                <img style="vertical-align: top;" alt="" src="~/images/icons/spinner/spinner-20-blue.gif" data-bind="visible: percentComplete() < 100" />
                                            </div>
                                        </div>
                                    </div>
                                    <div style="height: 28px; background-color: #bdebbd; width: 1%; -moz-transition: width 1s; -o-transition: width 1s; -webkit-transition: width 1s; transition: width 1s;"
                                         data-bind="style: { 'width': percentComplete() + '%' }">
                                    </div>
                                </div>
                            </div>
                            <div class="on-left">
                                @*<div style="padding: 7px;">
                                    <a href="#/cancel/" data-bind="visible: percentComplete() < 100"><img alt="Cancel upload" src="~/images/icons/closer/closer-20-red-disc.png" /></a>
                                    <a href="#/delete/" data-bind="visible: percentComplete() >= 100"><img alt="Delete file" src="~/images/icons/minus/minus-20-red.png" /></a>
                                </div>*@
                            </div>
                        </div>
                        <div data-bind="visible: errorMessage">
                            <span class="validationMessage" data-bind="text: errorMessage" style="display: inline;"></span>
                            &nbsp;
                            <a href="#" data-bind="click: function () { clearError($index()) }">OK</a>
                        </div>
                    </li>
                </ul>
                <div style="margin-top: 16px;">
                    <select id="post_agreement_upload_guid">
                        <option value="4158BC28-D8A8-4F3E-A9EE-539FBE7FEF39">Uploaded DOCX file</option>
                        <option value="D33CE26E-DA81-4966-8AD1-8FAF14E7A4B8">Uploaded WMV file</option>
                        <option value="DA78D228-B774-49BE-AB22-47EFB99003F8">Uploaded XLS file</option>
                        <option value="2CA0ED34-635E-4199-801E-B95F2F5AB27B">Uploaded PPT file</option>
                    </select>
                    <input id="post_agreement_upload_button" type="button" value="Post Without File Upload" />
                </div>
            </form>
        </div>
        <div>
        </div>
    </section>
    <section>
        <header>
            <h2>Placemark Drawing</h2>
        </header>
        <div>
            <div style="background-color: #999; padding: 10px;">
                <img id="placemark_graphic" alt="" src="@Url.HttpRouteUrl(null, new { controller = "Graphics", action = "GetCircle", Side = 24, Text = 0, })" style="border: solid 1px transparent;" />
                <span>Opacity: </span><span data-bind="text: window.countGraphicOpacity"></span>
            </div>
        </div>
    </section>
    <section data-bind="with: agreementSettings, visible: agreementSettings" style="display: none;">
        <header>
            <h2>Agreement Settings</h2>
        </header>
        <div>
            <code data-bind="text: urlString"></code>=&gt; <span class="url-string">&quot;<span data-bind="    text: eval(urlString)"></span>&quot;</span>
        </div>
        <div style="margin: 16px 0;">
            <input type="button" value="Invoke" data-bind="click: invoke" />
            <input type="button" value="Clear" data-bind="click: clear, visible: result" />
        </div>
        <div>
            <strong data-bind="visible: result">Result:</strong>
            <pre data-bind="text: result"></pre>
        </div>
    </section>
</div>

@section styles
{
    <style type="text/css">
        code, pre {
            font-family: 'Courier New', monospace;
        }

        .url-string {
            font-weight: bold;
            color: #c00;
        }

        .k-upload-button {
            max-width: 500px;
        }
    </style>
}
